# Generated by Django 4.2.3 on 2023-08-02 06:57

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertVariable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Alert Variable Name')),
                ('description', models.CharField(max_length=200, verbose_name='Description of alert')),
                ('createdAt', models.DateTimeField()),
                ('updatedAt', models.DateTimeField()),
            ],
            options={
                'ordering': ['-createdAt'],
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Chart name')),
                ('legende_axe_x', models.CharField(default='axe X', max_length=100, verbose_name='Legende X')),
                ('legende_axe_y', models.CharField(default='axe Y', max_length=100, verbose_name='Legende X')),
                ('createdAt', models.DateTimeField()),
                ('updatedAt', models.DateField()),
                ('widht', models.CharField(choices=[('25%', '25%'), ('33%', '33%'), ('50%', '50%'), ('75%', '75%'), ('100%', '100%')], default='100%', max_length=10)),
                ('position', models.IntegerField(verbose_name='Position in the list')),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.SlugField(max_length=80, verbose_name='variable name')),
                ('R', models.PositiveSmallIntegerField(default=0)),
                ('G', models.PositiveSmallIntegerField(default=0)),
                ('B', models.PositiveSmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70, verbose_name='Device name')),
                ('description', models.CharField(max_length=300, null=True, verbose_name='Device description')),
                ('active', models.BooleanField(default=True)),
                ('byte_order', models.CharField(choices=[('1-0-3-2', '1-0-3-2'), ('0-1-2-3', '0-1-2-3'), ('2-3-0-1', '2-3-0-1'), ('3-2-1-0', '3-2-1-0')], default='1-0-3-2', max_length=15)),
                ('polling_interval', models.FloatField(choices=[(0.1, '100 Milliseconds'), (0.5, '500 Milliseconds'), (1.0, '1 Second'), (5.0, '5 Seconds'), (10.0, '10 Seconds'), (15.0, '15 Seconds'), (30.0, '30 Seconds'), (60.0, '1 Minute'), (150.0, '2.5 Mintues'), (300.0, '5 Minutes'), (360.0, '6 Minutes (10 times per Hour)'), (600.0, '10 Minutes'), (900.0, '15 Minutes'), (1800.0, '30 Minutes'), (3600.0, '1 Hour'), (21600.0, '6 Hours'), (43200.0, '12 Hours'), (86400.0, '1 Day'), (604800.0, '1 Week')], default=5.0)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceProtocol',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('protocol', models.CharField(choices=[(0, 'Web Service'), (1, 'Modbus'), (2, 'BacNet')], max_length=400)),
                ('description', models.TextField(default='', null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Scaling',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('input_low', models.FloatField()),
                ('input_high', models.FloatField()),
                ('output_low', models.FloatField()),
                ('output_high', models.FloatField()),
                ('limit_input', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('unit', models.CharField(max_length=80, verbose_name='Unit')),
                ('description', models.TextField(default='', null=True, verbose_name='Description')),
                ('udunit', models.CharField(default='', max_length=500, verbose_name='udUnit')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.SlugField(max_length=200, unique=True, verbose_name='variable name')),
                ('description', models.TextField(default='', null=True, verbose_name='Description')),
                ('active', models.BooleanField(default=True)),
                ('writeable', models.BooleanField(default=False)),
                ('createdAt', models.DateTimeField()),
                ('updatedAt', models.DateTimeField()),
                ('value_class', models.CharField(choices=[('FLOAT32', 'REAL (FLOAT32)'), ('FLOAT32', 'SINGLE (FLOAT32)'), ('FLOAT32', 'FLOAT32'), ('UNIXTIMEF32', 'UNIXTIMEF32'), ('FLOAT64', 'LREAL (FLOAT64)'), ('FLOAT64', 'FLOAT  (FLOAT64)'), ('FLOAT64', 'DOUBLE (FLOAT64)'), ('FLOAT64', 'FLOAT64'), ('UNIXTIMEF64', 'UNIXTIMEF64'), ('FLOAT48', 'FLOAT48'), ('INT64', 'INT64'), ('UINT64', 'UINT64'), ('UNIXTIMEI64', 'UNIXTIMEI64'), ('INT48', 'INT48'), ('UNIXTIMEI32', 'UNIXTIMEI32'), ('INT32', 'INT32'), ('UINT32', 'DWORD (UINT32)'), ('UINT32', 'UINT32'), ('INT16', 'INT (INT16)'), ('INT16', 'INT16'), ('UINT16', 'WORD (UINT16)'), ('UINT16', 'UINT (UINT16)'), ('UINT16', 'UINT16'), ('INT8', 'INT8'), ('UINT8', 'UINT8'), ('BOOLEAN', 'BOOL (BOOLEAN)'), ('BOOLEAN', 'BOOLEAN')], default='FLOAT64', max_length=15, verbose_name='value_class')),
                ('cov_increment', models.FloatField(default=0, verbose_name='COV')),
                ('chart_line_thickness', models.PositiveSmallIntegerField(choices=[(3, '3Px')], default=3)),
                ('value_min', models.FloatField(blank=True, null=True)),
                ('value_max', models.FloatField(blank=True, null=True)),
                ('min_type', models.CharField(choices=[('lte', '<='), ('lt', '<')], default='lte', max_length=4)),
                ('max_type', models.CharField(choices=[('gte', '>='), ('gt', '>')], default='gte', max_length=4)),
                ('alerts', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.alertvariable')),
                ('chart_line_color', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.color')),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.device')),
                ('scaling', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.scaling')),
                ('unit', models.ForeignKey(on_delete=models.SET(1), to='users.unit')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Page name')),
                ('link_name', models.CharField(max_length=50, verbose_name='Link name')),
                ('createdAt', models.DateTimeField()),
                ('updatedAt', models.DateTimeField()),
                ('position', models.IntegerField(verbose_name='Position in the list')),
                ('visible', models.BooleanField(default=True)),
                ('charts', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.chart')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='protocol',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.deviceprotocol'),
        ),
        migrations.AddField(
            model_name='chart',
            name='devices',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.device'),
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Building name')),
                ('address', models.CharField(max_length=200, verbose_name='Building address')),
                ('createdAt', models.DateTimeField()),
                ('updatedAt', models.DateTimeField()),
                ('position', models.IntegerField(verbose_name='Position in the list')),
                ('visible', models.BooleanField(default=True)),
                ('pages', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.page')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
